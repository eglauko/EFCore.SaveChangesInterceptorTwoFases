
namespace EFCore.SaveChangesInterceptorTwoFases;

public interface IDomainEvent
{
    public Guid Id { get; }

    public DateTime Occurred { get; }
}

public interface ICreationEvent
{
    /// <summary>
    /// Notified after entities are saved and have the ID generated by the database.
    /// </summary>
    void Saved();
}

public abstract class DomainEvent : IDomainEvent
{
    protected DomainEvent(Guid id, DateTime occurred)
    {
        Id = id;
        Occurred = occurred;
    }

    protected DomainEvent()
    {
        Id = Guid.NewGuid();
        Occurred = DateTime.Now;
    }

    public Guid Id { get; }
    public DateTime Occurred { get; }
}

public class BlogCreated : DomainEvent, ICreationEvent
{
    private readonly Blog? blog;

    public int BlogId { get; private set; }

    public BlogCreated(Guid id, DateTime occurred, int blogId) : base(id, occurred)
    {
        BlogId = blogId;
    }

    public BlogCreated(Blog blog)
    {
        this.blog = blog;
    }

    public void Saved()
    {
        if (blog != null)
            BlogId = blog.Id;
    }
}
